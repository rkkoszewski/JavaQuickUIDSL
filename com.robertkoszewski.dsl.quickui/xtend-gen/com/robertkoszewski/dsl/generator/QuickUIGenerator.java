/**
 * generated by Xtext 2.10.0
 */
package com.robertkoszewski.dsl.generator;

import com.google.common.base.Objects;
import com.google.common.collect.Iterators;
import com.robertkoszewski.dsl.quickUI.Alias;
import com.robertkoszewski.dsl.quickUI.Checked;
import com.robertkoszewski.dsl.quickUI.Condition;
import com.robertkoszewski.dsl.quickUI.ConditionBranch;
import com.robertkoszewski.dsl.quickUI.ConditionConcatenation;
import com.robertkoszewski.dsl.quickUI.ConditionDefinition;
import com.robertkoszewski.dsl.quickUI.ConditionType;
import com.robertkoszewski.dsl.quickUI.Element;
import com.robertkoszewski.dsl.quickUI.Empty;
import com.robertkoszewski.dsl.quickUI.Enabled;
import com.robertkoszewski.dsl.quickUI.JavaElement;
import com.robertkoszewski.dsl.quickUI.Label;
import com.robertkoszewski.dsl.quickUI.OnClick;
import com.robertkoszewski.dsl.quickUI.Row;
import com.robertkoszewski.dsl.quickUI.Window;
import java.util.Arrays;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;
import java.util.logging.Filter;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class QuickUIGenerator extends AbstractGenerator {
  private HashMap<CharSequence, CharSequence> aliasMap;
  
  private Set<CharSequence> callbackMap;
  
  private HashMap<CharSequence, ConditionDefinition> conditionMap;
  
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    HashMap<CharSequence, CharSequence> _hashMap = new HashMap<CharSequence, CharSequence>();
    this.aliasMap = _hashMap;
    final Procedure1<Alias> _function = (Alias it) -> {
      this.buildAliasMap(it);
    };
    IteratorExtensions.<Alias>forEach(Iterators.<Alias>filter(resource.getAllContents(), Alias.class), _function);
    final Procedure1<Window> _function_1 = (Window it) -> {
      this.buildWindowFile(it, fsa);
    };
    IteratorExtensions.<Window>forEach(Iterators.<Window>filter(resource.getAllContents(), Window.class), _function_1);
  }
  
  public void buildAliasMap(final Alias alias) {
    this.aliasMap.put(alias.getName(), this.getPackageName(alias.getPackage()));
  }
  
  public CharSequence getPackageName(final com.robertkoszewski.dsl.quickUI.Package pkg) {
    String _pname = pkg.getPname();
    String _xifexpression = null;
    com.robertkoszewski.dsl.quickUI.Package _subp = pkg.getSubp();
    boolean _tripleEquals = (_subp == null);
    if (_tripleEquals) {
      _xifexpression = "";
    } else {
      CharSequence _packageName = this.getPackageName(pkg.getSubp());
      _xifexpression = ("." + _packageName);
    }
    return (_pname + _xifexpression);
  }
  
  public void buildWindowFile(final Window window, final IFileSystemAccess2 fsa) {
    String _name = window.getName();
    String _plus = (_name + ".java");
    fsa.generateFile(_plus, this.buildWindow(window));
  }
  
  public void initializeVariables() {
    this.counter = 1;
    this.condCounter = 1;
    HashMap<CharSequence, ConditionDefinition> _hashMap = new HashMap<CharSequence, ConditionDefinition>();
    this.conditionMap = _hashMap;
    HashSet<CharSequence> _hashSet = new HashSet<CharSequence>();
    this.callbackMap = _hashSet;
  }
  
  public CharSequence buildWindow(final Window window) {
    StringConcatenation _builder = new StringConcatenation();
    this.initializeVariables();
    _builder.newLineIfNotEmpty();
    _builder.append("import javax.swing.*;");
    _builder.newLine();
    _builder.append("import java.awt.*;");
    _builder.newLine();
    _builder.append("import java.awt.event.*;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class ");
    String _name = window.getName();
    _builder.append(_name);
    _builder.append(" { ");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private JFrame window;");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    {
      boolean _isMain = window.isMain();
      boolean _equals = (_isMain == true);
      if (_equals) {
        _builder.append("\t");
        _builder.append("public static void main(String[] args){");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t");
        _builder.append("try { // Set System Look & Feel");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("        ");
        _builder.append("UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("    ");
        _builder.append("}catch (Exception e) {");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("       ");
        _builder.append("// handle exception");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("    ");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("    ");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t");
        String _name_1 = window.getName();
        _builder.append(_name_1, "\t\t");
        _builder.append(" window = new ");
        String _name_2 = window.getName();
        _builder.append(_name_2, "\t\t");
        _builder.append("();");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("\t");
        _builder.append("try{");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t\t");
        _builder.append("window.show();");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t");
        _builder.append("}catch(Exception e){");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t\t");
        _builder.append("e.printStackTrace();");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t");
        _builder.newLine();
      }
    }
    _builder.append("\t");
    _builder.append("public ");
    String _name_3 = window.getName();
    _builder.append(_name_3, "\t");
    _builder.append("(){");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("try{");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("this.initialize();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}catch(Exception e){");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("e.printStackTrace();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* Initialize Window");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void initialize(){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("window = new JFrame();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("window.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);");
    _builder.newLine();
    {
      String _title = window.getTitle();
      boolean _tripleNotEquals = (_title != null);
      if (_tripleNotEquals) {
        _builder.append("\t\t");
        _builder.append("window.setTitle(\"");
        String _title_1 = window.getTitle();
        _builder.append(_title_1, "\t\t");
        _builder.append("\");");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t\t");
    _builder.append("window.getContentPane().setLayout(new BoxLayout(window.getContentPane(), BoxLayout.Y_AXIS));");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    {
      EList<Element> _menu_elements = window.getMenu_elements();
      boolean _tripleNotEquals_1 = (_menu_elements != null);
      if (_tripleNotEquals_1) {
        _builder.append("\t\t");
        CharSequence _buildMenu = this.buildMenu(window);
        _builder.append(_buildMenu, "\t\t");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.newLine();
      }
    }
    {
      EList<Element> _content_elements = window.getContent_elements();
      boolean _tripleNotEquals_2 = (_content_elements != null);
      if (_tripleNotEquals_2) {
        _builder.append("\t\t");
        CharSequence _buildContent = this.buildContent(window);
        _builder.append(_buildContent, "\t\t");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.newLine();
      }
    }
    {
      int _size = this.conditionMap.size();
      boolean _tripleNotEquals_3 = (_size != 0);
      if (_tripleNotEquals_3) {
        _builder.append("\t\t");
        CharSequence _buildConditions = this.buildConditions();
        _builder.append(_buildConditions, "\t\t");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t\t");
    _builder.append("window.pack();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* Show Window");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void show(){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("window.setVisible(true);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* Hide Window");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void hide(){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("window.setVisible(false);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* Dispose Window");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void dispose(){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("window.dispose();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    {
      int _size_1 = this.conditionMap.size();
      boolean _tripleNotEquals_4 = (_size_1 != 0);
      if (_tripleNotEquals_4) {
        _builder.append("\t");
        CharSequence _buildMediator = this.buildMediator();
        _builder.append(_buildMediator, "\t");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.newLine();
      }
    }
    {
      int _size_2 = this.callbackMap.size();
      boolean _tripleNotEquals_5 = (_size_2 != 0);
      if (_tripleNotEquals_5) {
        _builder.append("\t");
        CharSequence _buildCallbacks = this.buildCallbacks();
        _builder.append(_buildCallbacks, "\t");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.newLine();
      }
    }
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence buildMenu(final Window window) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("JMenuBar menuBar = new JMenuBar();");
    _builder.newLine();
    _builder.append("window.setJMenuBar(menuBar);");
    _builder.newLine();
    _builder.newLine();
    {
      EList<Element> _menu_elements = window.getMenu_elements();
      for(final Element e : _menu_elements) {
        CharSequence _buildElement = this.buildElement(e, "menuBar");
        _builder.append(_buildElement);
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  public CharSequence buildContent(final Window window) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("JPanel contentPanel = new JPanel();");
    _builder.newLine();
    _builder.append("contentPanel.setLayout(new BoxLayout(contentPanel, BoxLayout.Y_AXIS));");
    _builder.newLine();
    _builder.append("window.getContentPane().add(contentPanel);");
    _builder.newLine();
    _builder.newLine();
    {
      EList<Element> _content_elements = window.getContent_elements();
      for(final Element c : _content_elements) {
        CharSequence _buildElement = this.buildElement(c, "contentPanel");
        _builder.append(_buildElement);
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  protected CharSequence _buildElement(final JavaElement element, final CharSequence parentVarName) {
    StringConcatenation _builder = new StringConcatenation();
    CharSequence varName = this.getVariableName(element.getName());
    _builder.newLineIfNotEmpty();
    CharSequence _classPath = this.toClassPath(element.getAlias());
    _builder.append(_classPath);
    _builder.append(" ");
    _builder.append(varName);
    _builder.append(" = new ");
    CharSequence _classPath_1 = this.toClassPath(element.getAlias());
    _builder.append(_classPath_1);
    _builder.append("();");
    _builder.newLineIfNotEmpty();
    CharSequence _buildSpecialElement = this.buildSpecialElement(element, varName);
    _builder.append(_buildSpecialElement);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append(parentVarName);
    _builder.append(".add(");
    _builder.append(varName);
    _builder.append(");");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    {
      EList<EObject> _subelement = element.getSubelement();
      for(final EObject sube : _subelement) {
        CharSequence _buildElement = this.buildElement(sube, varName);
        _builder.append(_buildElement);
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  protected CharSequence _buildElement(final Row row, final CharSequence parentVarName) {
    StringConcatenation _builder = new StringConcatenation();
    CharSequence varName = this.getVariableName(row.getName());
    _builder.newLineIfNotEmpty();
    _builder.append("JPanel ");
    _builder.append(varName);
    _builder.append("_row = new JPanel();");
    _builder.newLineIfNotEmpty();
    _builder.append(varName);
    _builder.append("_row.setLayout(new BoxLayout(");
    _builder.append(varName);
    _builder.append("_row, BoxLayout.Y_AXIS));");
    _builder.newLineIfNotEmpty();
    _builder.append(parentVarName);
    _builder.append(".add(");
    _builder.append(varName);
    _builder.append("_row);");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("JPanel ");
    _builder.append(varName);
    _builder.append("_content = new JPanel();");
    _builder.newLineIfNotEmpty();
    _builder.append("FlowLayout ");
    _builder.append(varName);
    _builder.append("_fl = new FlowLayout();");
    _builder.newLineIfNotEmpty();
    _builder.append(varName);
    _builder.append("_fl.setAlignment(FlowLayout.LEFT);");
    _builder.newLineIfNotEmpty();
    _builder.append(varName);
    _builder.append("_content.setLayout(");
    _builder.append(varName);
    _builder.append("_fl);");
    _builder.newLineIfNotEmpty();
    _builder.append(varName);
    _builder.append("_row.add(");
    _builder.append(varName);
    _builder.append("_content);");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    {
      EList<EObject> _subelement = row.getSubelement();
      for(final EObject sube : _subelement) {
        String _plus = (varName + "_content");
        CharSequence _buildElement = this.buildElement(sube, _plus);
        _builder.append(_buildElement);
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  protected CharSequence _buildElement(final Label label, final CharSequence parent_var) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append(parent_var);
    _builder.append(".setText(\"");
    String _value = label.getValue();
    _builder.append(_value);
    _builder.append("\");");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  protected CharSequence _buildElement(final Checked check, final CharSequence parent_var) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append(parent_var);
    _builder.append(".setSelected(");
    {
      boolean _isIsTrue = check.getChecked().isIsTrue();
      boolean _equals = (_isIsTrue == true);
      if (_equals) {
        _builder.append("true");
      } else {
        _builder.append("false");
      }
    }
    _builder.append(");");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  protected CharSequence _buildElement(final Enabled dis, final CharSequence parent_var) {
    StringConcatenation _builder = new StringConcatenation();
    ConditionDefinition _put = this.conditionMap.put(parent_var, dis.getCondition());
    _builder.append(_put);
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence buildConditions() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("// ---- Conditions ----");
    _builder.newLine();
    {
      Set<Map.Entry<CharSequence, ConditionDefinition>> _entrySet = this.conditionMap.entrySet();
      for(final Map.Entry<CharSequence, ConditionDefinition> cond : _entrySet) {
        _builder.append("// Condition for Enable: ");
        CharSequence _key = cond.getKey();
        _builder.append(_key);
        _builder.newLineIfNotEmpty();
        CharSequence _processCondition = this.processCondition(cond.getValue(), cond.getKey(), null, null);
        _builder.append(_processCondition);
        _builder.newLineIfNotEmpty();
        _builder.newLine();
      }
    }
    return _builder;
  }
  
  protected CharSequence _processCondition(final ConditionBranch cond, final CharSequence target_var, final CharSequence parent_or_var, final CharSequence parent_and_var) {
    StringConcatenation _builder = new StringConcatenation();
    CharSequence or_var = parent_or_var;
    _builder.newLineIfNotEmpty();
    {
      if ((parent_or_var == null)) {
        CharSequence _orMap = this.getOrMap(or_var = this.getCondVariableName("or"));
        _builder.append(_orMap);
        _builder.newLineIfNotEmpty();
      }
    }
    {
      ConditionDefinition _left = cond.getLeft();
      boolean _tripleNotEquals = (_left != null);
      if (_tripleNotEquals) {
        CharSequence _processCondition = this.processCondition(cond.getLeft(), target_var, or_var, parent_and_var);
        _builder.append(_processCondition);
        _builder.newLineIfNotEmpty();
      }
    }
    {
      ConditionDefinition _right = cond.getRight();
      boolean _tripleNotEquals_1 = (_right != null);
      if (_tripleNotEquals_1) {
        CharSequence _processCondition_1 = this.processCondition(cond.getRight(), target_var, or_var, parent_and_var);
        _builder.append(_processCondition_1);
        _builder.newLineIfNotEmpty();
      }
    }
    {
      if ((parent_or_var == null)) {
        _builder.append("mediatorAddDisableOn(");
        _builder.append(target_var);
        _builder.append(", ");
        _builder.append(or_var);
        _builder.append(");");
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  protected CharSequence _processCondition(final ConditionConcatenation cond, final CharSequence target_var, final CharSequence parent_or_var, final CharSequence parent_and_var) {
    StringConcatenation _builder = new StringConcatenation();
    CharSequence or_var = parent_or_var;
    _builder.newLineIfNotEmpty();
    {
      if ((parent_or_var == null)) {
        CharSequence _orMap = this.getOrMap(or_var = this.getCondVariableName("or"));
        _builder.append(_orMap);
        _builder.newLineIfNotEmpty();
      }
    }
    CharSequence and_var = parent_and_var;
    _builder.newLineIfNotEmpty();
    {
      if ((parent_and_var == null)) {
        CharSequence _andMap = this.getAndMap(and_var = this.getCondVariableName("and"));
        _builder.append(_andMap);
        _builder.newLineIfNotEmpty();
      }
    }
    {
      ConditionDefinition _left = cond.getLeft();
      boolean _tripleNotEquals = (_left != null);
      if (_tripleNotEquals) {
        CharSequence _processCondition = this.processCondition(cond.getLeft(), target_var, or_var, and_var);
        _builder.append(_processCondition);
        _builder.newLineIfNotEmpty();
      }
    }
    {
      ConditionDefinition _right = cond.getRight();
      boolean _tripleNotEquals_1 = (_right != null);
      if (_tripleNotEquals_1) {
        CharSequence _processCondition_1 = this.processCondition(cond.getRight(), target_var, or_var, and_var);
        _builder.append(_processCondition_1);
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append(or_var);
    _builder.append(".add(");
    _builder.append(and_var);
    _builder.append("); // Add AND to OR");
    _builder.newLineIfNotEmpty();
    {
      if ((parent_or_var == null)) {
        _builder.append("mediatorAddDisableOn(");
        _builder.append(target_var);
        _builder.append(", ");
        _builder.append(or_var);
        _builder.append(");");
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  protected CharSequence _processCondition(final Condition cond, final CharSequence target_var, final CharSequence parent_or_var, final CharSequence parent_and_var) {
    StringConcatenation _builder = new StringConcatenation();
    CharSequence or_var = parent_or_var;
    CharSequence and_var = parent_and_var;
    _builder.newLineIfNotEmpty();
    {
      if ((parent_or_var == null)) {
        CharSequence _orMap = this.getOrMap(or_var = this.getCondVariableName("or"));
        _builder.append(_orMap);
        _builder.newLineIfNotEmpty();
      }
    }
    {
      if ((parent_and_var == null)) {
        CharSequence _andMap = this.getAndMap(and_var = this.getCondVariableName("and"));
        _builder.append(_andMap);
        _builder.newLineIfNotEmpty();
        _builder.append(or_var);
        _builder.append(".add(");
        _builder.append(and_var);
        _builder.append("); // Add AND to OR");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append(and_var);
    _builder.append(".put(");
    CharSequence _variableName = this.getVariableName(cond.getElement().getName());
    _builder.append(_variableName);
    _builder.append(", Condition.");
    CharSequence _processConditionType = this.processConditionType(cond.getCondition(), cond.isNegation());
    _builder.append(_processConditionType);
    _builder.append(");");
    _builder.newLineIfNotEmpty();
    {
      if ((parent_or_var == null)) {
        _builder.append("mediatorAddDisableOn(");
        _builder.append(target_var);
        _builder.append(", ");
        _builder.append(or_var);
        _builder.append(");");
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  protected CharSequence _processConditionType(final Empty type, final boolean negation) {
    StringConcatenation _builder = new StringConcatenation();
    {
      if (negation) {
        _builder.append("NONEMPTY");
      } else {
        _builder.append("EMPTY");
      }
    }
    return _builder;
  }
  
  protected CharSequence _processConditionType(final Checked type, final boolean negation) {
    StringConcatenation _builder = new StringConcatenation();
    {
      if ((!negation)) {
        _builder.append("NONEMPTY");
      } else {
        _builder.append("EMPTY");
      }
    }
    return _builder;
  }
  
  protected CharSequence _buildElement(final OnClick onclick, final CharSequence parent_var) {
    StringConcatenation _builder = new StringConcatenation();
    {
      boolean _add = this.callbackMap.add(onclick.getCallback());
      if (_add) {
      }
    }
    _builder.append(parent_var);
    _builder.append(".addActionListener(new ActionListener() {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("public void actionPerformed(ActionEvent e) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("action_");
    String _callback = onclick.getCallback();
    _builder.append(_callback, "\t\t");
    _builder.append("(e);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("});");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence getOrMap(final CharSequence or_var) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("java.util.ArrayList<java.util.Map<Object, Condition>> ");
    _builder.append(or_var);
    _builder.append(" = new java.util.ArrayList<java.util.Map<Object, Condition>>(); // OR\t");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence getAndMap(final CharSequence and_var) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("java.util.HashMap<Object, Condition> ");
    _builder.append(and_var);
    _builder.append(" = new java.util.HashMap<Object, Condition>(); // AND");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence buildCallbacks() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("/*  ################ *");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*  Action Callbacks *");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*  ################ */");
    _builder.newLine();
    _builder.newLine();
    {
      for(final CharSequence call : this.callbackMap) {
        _builder.append("/**");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("* Action Callback for ");
        _builder.append(call, " ");
        _builder.newLineIfNotEmpty();
        _builder.append(" ");
        _builder.append("* @param ActionEvent");
        _builder.newLine();
        _builder.append(" ");
        _builder.append("*/");
        _builder.newLine();
        _builder.append("private void action_");
        _builder.append(call);
        _builder.append("(ActionEvent e){");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("// Handle Action Event from ");
        _builder.append(call, "\t");
        _builder.newLineIfNotEmpty();
        _builder.append("}");
        _builder.newLine();
        _builder.newLine();
      }
    }
    return _builder;
  }
  
  protected CharSequence _buildElement(final Filter filter, final CharSequence parent_var) {
    StringConcatenation _builder = new StringConcatenation();
    return _builder;
  }
  
  public CharSequence buildSpecialElement(final JavaElement element, final CharSequence variable) {
    CharSequence _classPath = this.toClassPath(element.getAlias());
    boolean _matched = false;
    if (Objects.equal(_classPath, "javax.swing.JTextField")) {
      _matched=true;
      return (variable + ".setColumns(10);");
    }
    return null;
  }
  
  public CharSequence buildMediator() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Mediator Function");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @param Target Element");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* @param Condition List");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("private void mediatorAddDisableOn(final Object element, java.util.ArrayList<java.util.Map<Object, Condition>> condition_list){");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("JComponent component = (JComponent) element;");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("Runnable callback = new Runnable(){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("public void run() {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("boolean enabled = true;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("java.util.Iterator<java.util.Map<Object, Condition>> lit = condition_list.iterator();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("while(lit.hasNext()){ // OR Condition");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("java.util.Iterator<java.util.Map.Entry<Object, Condition>> it = lit.next().entrySet().iterator();");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("while(it.hasNext()){ // AND Condition");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("java.util.Map.Entry<Object, Condition> cond = it.next();");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("Object target = cond.getKey();");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("boolean empty = false;");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("if(target instanceof javax.swing.text.JTextComponent) // Text Component");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("empty = ((javax.swing.text.JTextComponent) target).getText().equals(\"\");");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("else if (target instanceof AbstractButton) // Abstract Button (CheckBoxes)");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("empty = !((AbstractButton) target).isSelected();");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("switch(cond.getValue()){");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("case EMPTY:");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("enabled = (!empty?false:enabled);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("break;");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("case NONEMPTY:");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("enabled = (empty?false:enabled);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("break;");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("if(enabled){");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("component.setEnabled(true); // Enable Element");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("return;");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("enabled = true;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("component.setEnabled(false); // Disable Element");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("};");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// Only Register Each Element Once");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("java.util.HashSet<Object> uniqueObject = new java.util.HashSet<Object>();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("java.util.Iterator<java.util.Map<Object, Condition>> lit = condition_list.iterator();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("while(lit.hasNext()){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("java.util.Iterator<Object> vit = lit.next().keySet().iterator();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("while(vit.hasNext())");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("uniqueObject.add(vit.next());");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// Register Listeners");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("java.util.Iterator<Object> doi = uniqueObject.iterator();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("while(doi.hasNext()){");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Object target = doi.next();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if(target instanceof javax.swing.text.JTextComponent){");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("((javax.swing.text.JTextComponent)target).getDocument().addDocumentListener(new javax.swing.event.DocumentListener() {");
    _builder.newLine();
    _builder.append("\t\t\t    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t\t\t    ");
    _builder.append("public void insertUpdate(javax.swing.event.DocumentEvent e) {");
    _builder.newLine();
    _builder.append("\t\t\t    \t");
    _builder.append("callback.run();");
    _builder.newLine();
    _builder.append("\t\t\t    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t\t    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t\t\t    ");
    _builder.append("public void removeUpdate(javax.swing.event.DocumentEvent e) {");
    _builder.newLine();
    _builder.append("\t\t\t    \t");
    _builder.append("callback.run();");
    _builder.newLine();
    _builder.append("\t\t\t    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t\t    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t\t\t    ");
    _builder.append("public void changedUpdate(javax.swing.event.DocumentEvent e) {");
    _builder.newLine();
    _builder.append("\t\t\t    \t");
    _builder.append("callback.run();");
    _builder.newLine();
    _builder.append("\t\t\t    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("});");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}else if(target instanceof AbstractButton){");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("((AbstractButton)target).addActionListener(new ActionListener() {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("public void actionPerformed(ActionEvent e) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("callback.run();");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("});");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}else{");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("System.err.println(\"ERROR: Object of unsupported type\");");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("callback.run(); // Run Callback On Initialize");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Conditions");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("enum Condition{");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("EMPTY,");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("NONEMPTY");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  private int counter = 1;
  
  public CharSequence getVariableName(final CharSequence variable) {
    if ((variable != null)) {
      return ("item_" + variable);
    }
    int _plusPlus = this.counter++;
    return ("uitem_" + Integer.valueOf(_plusPlus));
  }
  
  private int condCounter = 1;
  
  public CharSequence getCondVariableName(final CharSequence verb) {
    int _plusPlus = this.condCounter++;
    return (("cond_" + verb) + Integer.valueOf(_plusPlus));
  }
  
  public CharSequence toClassPath(final Alias alias) {
    return this.aliasMap.get(alias.getName());
  }
  
  public CharSequence buildElement(final Object check, final CharSequence parent_var) {
    if (check instanceof Checked) {
      return _buildElement((Checked)check, parent_var);
    } else if (check instanceof Enabled) {
      return _buildElement((Enabled)check, parent_var);
    } else if (check instanceof JavaElement) {
      return _buildElement((JavaElement)check, parent_var);
    } else if (check instanceof Label) {
      return _buildElement((Label)check, parent_var);
    } else if (check instanceof OnClick) {
      return _buildElement((OnClick)check, parent_var);
    } else if (check instanceof Row) {
      return _buildElement((Row)check, parent_var);
    } else if (check instanceof Filter) {
      return _buildElement((Filter)check, parent_var);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(check, parent_var).toString());
    }
  }
  
  public CharSequence processCondition(final ConditionDefinition cond, final CharSequence target_var, final CharSequence parent_or_var, final CharSequence parent_and_var) {
    if (cond instanceof Condition) {
      return _processCondition((Condition)cond, target_var, parent_or_var, parent_and_var);
    } else if (cond instanceof ConditionBranch) {
      return _processCondition((ConditionBranch)cond, target_var, parent_or_var, parent_and_var);
    } else if (cond instanceof ConditionConcatenation) {
      return _processCondition((ConditionConcatenation)cond, target_var, parent_or_var, parent_and_var);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(cond, target_var, parent_or_var, parent_and_var).toString());
    }
  }
  
  public CharSequence processConditionType(final ConditionType type, final boolean negation) {
    if (type instanceof Checked) {
      return _processConditionType((Checked)type, negation);
    } else if (type instanceof Empty) {
      return _processConditionType((Empty)type, negation);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(type, negation).toString());
    }
  }
}
