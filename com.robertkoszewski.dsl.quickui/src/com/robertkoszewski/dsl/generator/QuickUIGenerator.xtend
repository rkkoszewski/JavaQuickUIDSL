/*
 * generated by Xtext 2.10.0
 */
package com.robertkoszewski.dsl.generator

import com.robertkoszewski.dsl.quickUI.Package
import java.util.HashMap
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import com.robertkoszewski.dsl.quickUI.Window
import com.robertkoszewski.dsl.quickUI.Alias
import com.robertkoszewski.dsl.quickUI.JavaElement
import com.robertkoszewski.dsl.quickUI.Row
import com.robertkoszewski.dsl.quickUI.Label
import com.robertkoszewski.dsl.quickUI.Checked
import com.robertkoszewski.dsl.quickUI.OnClick
import com.robertkoszewski.dsl.quickUI.Enabled
import java.util.logging.Filter
import java.util.Set
import java.util.HashSet
import com.robertkoszewski.dsl.quickUI.ConditionBranch
import com.robertkoszewski.dsl.quickUI.ConditionConcatenation
import com.robertkoszewski.dsl.quickUI.ConditionDefinition
import com.robertkoszewski.dsl.quickUI.Condition
import com.robertkoszewski.dsl.quickUI.Empty

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class QuickUIGenerator extends AbstractGenerator {
	
	HashMap<CharSequence, CharSequence> aliasMap
	Set<CharSequence> callbackMap
	HashMap<CharSequence, ConditionDefinition> conditionMap

	// Generate Files
	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		// Build Alias Map
		aliasMap = new HashMap<CharSequence, CharSequence>()
		resource.allContents.filter(typeof(Alias)).forEach[buildAliasMap]

		// Generate Window
		resource.allContents.filter(typeof(Window)).forEach[buildWindowFile(fsa)]
		
	}
	
	// Build Alias Map
	def void buildAliasMap(Alias alias){
		aliasMap.put(alias.name, getPackageName(alias.package))
	}
	
	// Returns Full Qualified Package Name
	def CharSequence getPackageName(Package pkg) {
		return pkg.pname + if(pkg.subp === null) "" else "."+getPackageName(pkg.subp)
	}

	// Build Window File
	def buildWindowFile(Window window, IFileSystemAccess2 fsa) {		
		fsa.generateFile(window.name+".java", window.buildWindow)
	}
	
	// Initialize Variables (Per Window)
	def void initializeVariables(){
		counter = 1;
		condCounter = 1;
		conditionMap = new HashMap<CharSequence, ConditionDefinition>()
		callbackMap = new HashSet<CharSequence>()
	}
	
	// Build Window Class
	def CharSequence buildWindow(Window window) '''
	«initializeVariables()»
	import javax.swing.*;
	import java.awt.*;
	import java.awt.event.*;

	public class «window.name» { 
		
		private JFrame window;
		
		«IF window.main == true»
		public static void main(String[] args){
			try { // Set System Look & Feel
		        UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
		    }catch (Exception e) {
		       // handle exception
		    }
		    
			«window.name» window = new «window.name»();
			try{
				window.show();
			}catch(Exception e){
				e.printStackTrace();
			}
		}
		
		«ENDIF»
		public «window.name»(){
			try{
				this.initialize();
			}catch(Exception e){
				e.printStackTrace();
			}
		}
		
		/**
		 * Initialize Window
		 */
		public void initialize(){
			window = new JFrame();
			window.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
			«IF window.title !== null»
			window.setTitle("«window.title»");
			«ENDIF»
			window.getContentPane().setLayout(new BoxLayout(window.getContentPane(), BoxLayout.Y_AXIS));
			
			«IF window.menu_elements !== null»
			«window.buildMenu»
			
			«ENDIF»
			«IF window.content_elements !== null»
			«window.buildContent»
			
			«ENDIF»
			«IF conditionMap.size !== 0»
			«buildConditions()»
			«ENDIF»
			window.pack();
			
		}
		
		
		/**
		 * Show Window
		 */
		public void show(){
			window.setVisible(true);
		}
		
		/**
		 * Hide Window
		 */
		public void hide(){
			window.setVisible(false);
		}
		
		/**
		 * Dispose Window
		 */
		public void dispose(){
			window.dispose();
		}
		
		«IF conditionMap.size !== 0»
		«buildMediator()»
		
		«ENDIF»
		«IF callbackMap.size !== 0»
		«buildCallbacks()»
		
		«ENDIF»
	}
	'''
	
	// Build Menu
	def CharSequence buildMenu(Window window) '''
	JMenuBar menuBar = new JMenuBar();
	window.setJMenuBar(menuBar);
	
	«FOR e: window.menu_elements»
		«e.buildElement("menuBar")»
	«ENDFOR»
	'''

	// Build Content
	def CharSequence buildContent(Window window) '''
	JPanel contentPanel = new JPanel();
	contentPanel.setLayout(new BoxLayout(contentPanel, BoxLayout.Y_AXIS));
	window.getContentPane().add(contentPanel);
	
	«FOR c: window.content_elements»
		«c.buildElement("contentPanel")»
	«ENDFOR»
	'''
	
	// Build Java Element
	def dispatch CharSequence buildElement(JavaElement element, CharSequence parentVarName) '''	
	«var varName = element.name.getVariableName»
	«element.alias.toClassPath» «varName» = new «element.alias.toClassPath»();
	«element.buildSpecialElement(varName)»
	
	«parentVarName».add(«varName»);

	«FOR sube: element.subelement»
	«sube.buildElement(varName)»
	«ENDFOR»
	'''

	// Build Row Element
	def dispatch CharSequence buildElement(Row row, CharSequence parentVarName) '''	
	«var varName = row.name.getVariableName»
	JPanel «varName»_row = new JPanel();
	«varName»_row.setLayout(new BoxLayout(«varName»_row, BoxLayout.Y_AXIS));
	«parentVarName».add(«varName»_row);
	
	JPanel «varName»_content = new JPanel();
	FlowLayout «varName»_fl = new FlowLayout();
	«varName»_fl.setAlignment(FlowLayout.LEFT);
	«varName»_content.setLayout(«varName»_fl);
	«varName»_row.add(«varName»_content);

	«FOR sube: row.subelement»
	«sube.buildElement(varName+"_content")»
	«ENDFOR»
	'''
	
	// Build Options
	
	// Build Option - Label
	def dispatch CharSequence buildElement(Label label, CharSequence parent_var) '''
	«parent_var».setText("«label.value»");
	'''
	
	// Build Option - Checked
	def dispatch CharSequence buildElement(Checked check, CharSequence parent_var) '''
	«parent_var».setSelected(«IF check.checked.isIsTrue == true»true«ELSE»false«ENDIF»);
	'''
	
	// Build Option - Enabled
	def dispatch CharSequence buildElement(Enabled dis, CharSequence parent_var) '''
	«conditionMap.put(parent_var, dis.condition)»
	'''
	
	// Build Option - Disabled -> Build Conditions
	def CharSequence buildConditions() '''
		// ---- Conditions ----
		«FOR cond: conditionMap.entrySet»
		// Condition for Enable: «cond.key»
		«cond.value.processCondition(cond.key, null, null)»
		
		«ENDFOR»
	'''

	// Disable - Condition -> Condition Branch (OR)
	def dispatch CharSequence processCondition(ConditionBranch cond, CharSequence target_var, CharSequence parent_or_var, CharSequence parent_and_var)'''
	«var or_var = parent_or_var»
	«IF parent_or_var === null»
	«getOrMap(or_var = getCondVariableName("or"))»
	«ENDIF»
	«IF cond.left !== null»
	«cond.left.processCondition(target_var, or_var, parent_and_var)»
	«ENDIF»
	«IF cond.right !== null»
	«cond.right.processCondition(target_var, or_var, parent_and_var)»
	«ENDIF»
	«IF parent_or_var === null»
	mediatorAddDisableOn(«target_var», «or_var»);
	«ENDIF»
	'''

	// Disable - Condition -> Condition Concatenation (AND)
	def dispatch CharSequence processCondition(ConditionConcatenation cond, CharSequence target_var, CharSequence parent_or_var, CharSequence parent_and_var)'''
	«var or_var = parent_or_var»
	«IF parent_or_var === null»
	«getOrMap(or_var = getCondVariableName("or"))»
	«ENDIF»
	«var and_var = parent_and_var»
	«IF parent_and_var === null»
	«getAndMap(and_var = getCondVariableName("and"))»
	«ENDIF»
	«IF cond.left !== null»
	«cond.left.processCondition(target_var, or_var, and_var)»
	«ENDIF»
	«IF cond.right !== null»
	«cond.right.processCondition(target_var, or_var, and_var)»
	«ENDIF»
	«or_var».add(«and_var»); // Add AND to OR
	«IF parent_or_var === null»
	mediatorAddDisableOn(«target_var», «or_var»);
	«ENDIF»
	'''

	// Disable - Condition -> Condition
	def dispatch CharSequence processCondition(Condition cond, CharSequence target_var, CharSequence parent_or_var, CharSequence parent_and_var)'''
	«var or_var = parent_or_var»«var and_var = parent_and_var»
	«IF parent_or_var === null»
	«getOrMap(or_var = getCondVariableName("or"))»
	«ENDIF»
	«IF parent_and_var === null»
	«getAndMap(and_var = getCondVariableName("and"))»
	«or_var».add(«and_var»); // Add AND to OR
	«ENDIF»
	«and_var».put(«cond.element.name.getVariableName», Condition.«cond.condition.processConditionType(cond.negation)»);
	«IF parent_or_var === null»
	mediatorAddDisableOn(«target_var», «or_var»);
	«ENDIF»
	'''
	
	def dispatch CharSequence processConditionType(Empty type, boolean negation)'''«IF negation»NONEMPTY«ELSE»EMPTY«ENDIF»'''
	def dispatch CharSequence processConditionType(Checked type, boolean negation)'''«IF !negation»NONEMPTY«ELSE»EMPTY«ENDIF»'''

	// Build Option - OnClick
	def dispatch CharSequence buildElement(OnClick onclick, CharSequence parent_var) '''
	«IF callbackMap.add(onclick.callback)»«ENDIF /* Dummy IF statement to avoid printing TRUE or FALSE to source */»
	«parent_var».addActionListener(new ActionListener() {
		public void actionPerformed(ActionEvent e) {
			action_«onclick.callback»(e);
		}
	});
	'''
	
	def CharSequence getOrMap(CharSequence or_var)'''
	java.util.ArrayList<java.util.Map<Object, Condition>> «or_var» = new java.util.ArrayList<java.util.Map<Object, Condition>>(); // OR	
	'''
	
	def CharSequence getAndMap(CharSequence and_var)'''
	java.util.HashMap<Object, Condition> «and_var» = new java.util.HashMap<Object, Condition>(); // AND
	'''
	
	// Build Option - OnClick -> Build Callbacks
	def CharSequence buildCallbacks() '''
	/*  ################ *
	 *  Action Callbacks *
	 *  ################ */

	«FOR call: callbackMap»
	/**
	 * Action Callback for «call»
	 * @param ActionEvent
	 */
	private void action_«call»(ActionEvent e){
		// Handle Action Event from «call»
	}
	
	«ENDFOR»
	'''
	
	// Build Option - Filter
	def dispatch CharSequence buildElement(Filter filter, CharSequence parent_var) ''''''
	
	// Special Elements - Custom Fixes
	def CharSequence buildSpecialElement(JavaElement element, CharSequence variable){
		switch(toClassPath(element.alias)){	
			case "javax.swing.JTextField": // JTextField: Add Width
			return variable + ".setColumns(10);"
			
		}
	}
	
	// Mediator Function
	def CharSequence buildMediator() '''
	/**
	 * Mediator Function
	 * @param Target Element
	 * @param Condition List
	 */
	private void mediatorAddDisableOn(final Object element, java.util.ArrayList<java.util.Map<Object, Condition>> condition_list){
		JComponent component = (JComponent) element;
		
		Runnable callback = new Runnable(){
			@Override
			public void run() {
				boolean enabled = true;
				
				java.util.Iterator<java.util.Map<Object, Condition>> lit = condition_list.iterator();
				while(lit.hasNext()){ // OR Condition
					
					java.util.Iterator<java.util.Map.Entry<Object, Condition>> it = lit.next().entrySet().iterator();
					while(it.hasNext()){ // AND Condition
						
						java.util.Map.Entry<Object, Condition> cond = it.next();
						Object target = cond.getKey();
						boolean empty = false;
						
						if(target instanceof javax.swing.text.JTextComponent) // Text Component
							empty = ((javax.swing.text.JTextComponent) target).getText().equals("");
						else if (target instanceof AbstractButton) // Abstract Button (CheckBoxes)
							empty = !((AbstractButton) target).isSelected();
						
						switch(cond.getValue()){
						case EMPTY:
							enabled = (!empty?false:enabled);
							break;
						case NONEMPTY:
							enabled = (empty?false:enabled);
							break;
						}
					}
					
					if(enabled){
						component.setEnabled(true); // Enable Element
						return;
					}
					
					enabled = true;
				}
				
				component.setEnabled(false); // Disable Element
			}
		};
		
		// Only Register Each Element Once
		java.util.HashSet<Object> uniqueObject = new java.util.HashSet<Object>();
		java.util.Iterator<java.util.Map<Object, Condition>> lit = condition_list.iterator();
		while(lit.hasNext()){
			java.util.Iterator<Object> vit = lit.next().keySet().iterator();
			while(vit.hasNext())
				uniqueObject.add(vit.next());
		}
		
		// Register Listeners
		java.util.Iterator<Object> doi = uniqueObject.iterator();
		while(doi.hasNext()){

			Object target = doi.next();
	
			if(target instanceof javax.swing.text.JTextComponent){
				((javax.swing.text.JTextComponent)target).getDocument().addDocumentListener(new javax.swing.event.DocumentListener() {
				    @Override
				    public void insertUpdate(javax.swing.event.DocumentEvent e) {
				    	callback.run();
				    }
	
				    @Override
				    public void removeUpdate(javax.swing.event.DocumentEvent e) {
				    	callback.run();
				    }
	
				    @Override
				    public void changedUpdate(javax.swing.event.DocumentEvent e) {
				    	callback.run();
				    }
				});
			}else if(target instanceof AbstractButton){
				((AbstractButton)target).addActionListener(new ActionListener() {
					public void actionPerformed(ActionEvent e) {
						callback.run();
					}
				});
				
			}else{
				System.err.println("ERROR: Object of unsupported type");
			}
		}
	
		callback.run(); // Run Callback On Initialize
	}
	
	/**
	 * Conditions
	 */
	enum Condition{
		EMPTY,
		NONEMPTY
	}
	'''
	
	// Variable Generator
	int counter = 1;
	
	def CharSequence getVariableName(CharSequence variable){
		if(variable !== null)
			return "item_"+variable;
		return "uitem_" + counter++;
	}
	
	// Condition Variable Generator
	int condCounter = 1;
	
	def CharSequence getCondVariableName(CharSequence verb){
		return "cond_" + verb + condCounter++;
	}
	
	// Alias to Java Class
	def CharSequence toClassPath(Alias alias) {
		return aliasMap.get(alias.name);
	}
	
}
