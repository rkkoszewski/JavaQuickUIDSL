/**
 * generated by Xtext 2.11.0
 */
package com.robertkoszewski.dsl.quickUI.impl;

import com.robertkoszewski.dsl.quickUI.Alias;
import com.robertkoszewski.dsl.quickUI.Checked;
import com.robertkoszewski.dsl.quickUI.Condition;
import com.robertkoszewski.dsl.quickUI.ConditionBranch;
import com.robertkoszewski.dsl.quickUI.ConditionConcatenation;
import com.robertkoszewski.dsl.quickUI.ConditionDefinition;
import com.robertkoszewski.dsl.quickUI.ConditionType;
import com.robertkoszewski.dsl.quickUI.Element;
import com.robertkoszewski.dsl.quickUI.Empty;
import com.robertkoszewski.dsl.quickUI.Enabled;
import com.robertkoszewski.dsl.quickUI.JavaElement;
import com.robertkoszewski.dsl.quickUI.Label;
import com.robertkoszewski.dsl.quickUI.OnClick;
import com.robertkoszewski.dsl.quickUI.Option;
import com.robertkoszewski.dsl.quickUI.QuickUIFactory;
import com.robertkoszewski.dsl.quickUI.QuickUIPackage;
import com.robertkoszewski.dsl.quickUI.Row;
import com.robertkoszewski.dsl.quickUI.UIModel;
import com.robertkoszewski.dsl.quickUI.Window;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class QuickUIFactoryImpl extends EFactoryImpl implements QuickUIFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static QuickUIFactory init()
  {
    try
    {
      QuickUIFactory theQuickUIFactory = (QuickUIFactory)EPackage.Registry.INSTANCE.getEFactory(QuickUIPackage.eNS_URI);
      if (theQuickUIFactory != null)
      {
        return theQuickUIFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new QuickUIFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public QuickUIFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case QuickUIPackage.UI_MODEL: return createUIModel();
      case QuickUIPackage.ALIAS: return createAlias();
      case QuickUIPackage.PACKAGE: return createPackage();
      case QuickUIPackage.WINDOW: return createWindow();
      case QuickUIPackage.ELEMENT: return createElement();
      case QuickUIPackage.JAVA_ELEMENT: return createJavaElement();
      case QuickUIPackage.ROW: return createRow();
      case QuickUIPackage.OPTION: return createOption();
      case QuickUIPackage.LABEL: return createLabel();
      case QuickUIPackage.ENABLED: return createEnabled();
      case QuickUIPackage.CONDITION_DEFINITION: return createConditionDefinition();
      case QuickUIPackage.CONDITION: return createCondition();
      case QuickUIPackage.CONDITION_TYPE: return createConditionType();
      case QuickUIPackage.CHECKED: return createChecked();
      case QuickUIPackage.ON_CLICK: return createOnClick();
      case QuickUIPackage.BOOLEAN: return createBoolean();
      case QuickUIPackage.CONDITION_BRANCH: return createConditionBranch();
      case QuickUIPackage.CONDITION_CONCATENATION: return createConditionConcatenation();
      case QuickUIPackage.EMPTY: return createEmpty();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public UIModel createUIModel()
  {
    UIModelImpl uiModel = new UIModelImpl();
    return uiModel;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Alias createAlias()
  {
    AliasImpl alias = new AliasImpl();
    return alias;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public com.robertkoszewski.dsl.quickUI.Package createPackage()
  {
    PackageImpl package_ = new PackageImpl();
    return package_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Window createWindow()
  {
    WindowImpl window = new WindowImpl();
    return window;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Element createElement()
  {
    ElementImpl element = new ElementImpl();
    return element;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public JavaElement createJavaElement()
  {
    JavaElementImpl javaElement = new JavaElementImpl();
    return javaElement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Row createRow()
  {
    RowImpl row = new RowImpl();
    return row;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Option createOption()
  {
    OptionImpl option = new OptionImpl();
    return option;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Label createLabel()
  {
    LabelImpl label = new LabelImpl();
    return label;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Enabled createEnabled()
  {
    EnabledImpl enabled = new EnabledImpl();
    return enabled;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ConditionDefinition createConditionDefinition()
  {
    ConditionDefinitionImpl conditionDefinition = new ConditionDefinitionImpl();
    return conditionDefinition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Condition createCondition()
  {
    ConditionImpl condition = new ConditionImpl();
    return condition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ConditionType createConditionType()
  {
    ConditionTypeImpl conditionType = new ConditionTypeImpl();
    return conditionType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Checked createChecked()
  {
    CheckedImpl checked = new CheckedImpl();
    return checked;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public OnClick createOnClick()
  {
    OnClickImpl onClick = new OnClickImpl();
    return onClick;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public com.robertkoszewski.dsl.quickUI.Boolean createBoolean()
  {
    BooleanImpl boolean_ = new BooleanImpl();
    return boolean_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ConditionBranch createConditionBranch()
  {
    ConditionBranchImpl conditionBranch = new ConditionBranchImpl();
    return conditionBranch;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ConditionConcatenation createConditionConcatenation()
  {
    ConditionConcatenationImpl conditionConcatenation = new ConditionConcatenationImpl();
    return conditionConcatenation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Empty createEmpty()
  {
    EmptyImpl empty = new EmptyImpl();
    return empty;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public QuickUIPackage getQuickUIPackage()
  {
    return (QuickUIPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static QuickUIPackage getPackage()
  {
    return QuickUIPackage.eINSTANCE;
  }

} //QuickUIFactoryImpl
