/**
 * generated by Xtext 2.11.0
 */
package com.robertkoszewski.dsl.quickUI.impl;

import com.robertkoszewski.dsl.quickUI.Alias;
import com.robertkoszewski.dsl.quickUI.QuickUIPackage;
import com.robertkoszewski.dsl.quickUI.UIModel;
import com.robertkoszewski.dsl.quickUI.Window;

import java.util.Collection;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>UI Model</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.robertkoszewski.dsl.quickUI.impl.UIModelImpl#getAlias <em>Alias</em>}</li>
 *   <li>{@link com.robertkoszewski.dsl.quickUI.impl.UIModelImpl#getWindow <em>Window</em>}</li>
 * </ul>
 *
 * @generated
 */
public class UIModelImpl extends MinimalEObjectImpl.Container implements UIModel
{
  /**
   * The cached value of the '{@link #getAlias() <em>Alias</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAlias()
   * @generated
   * @ordered
   */
  protected EList<Alias> alias;

  /**
   * The cached value of the '{@link #getWindow() <em>Window</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getWindow()
   * @generated
   * @ordered
   */
  protected EList<Window> window;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected UIModelImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return QuickUIPackage.Literals.UI_MODEL;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Alias> getAlias()
  {
    if (alias == null)
    {
      alias = new EObjectContainmentEList<Alias>(Alias.class, this, QuickUIPackage.UI_MODEL__ALIAS);
    }
    return alias;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Window> getWindow()
  {
    if (window == null)
    {
      window = new EObjectContainmentEList<Window>(Window.class, this, QuickUIPackage.UI_MODEL__WINDOW);
    }
    return window;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case QuickUIPackage.UI_MODEL__ALIAS:
        return ((InternalEList<?>)getAlias()).basicRemove(otherEnd, msgs);
      case QuickUIPackage.UI_MODEL__WINDOW:
        return ((InternalEList<?>)getWindow()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case QuickUIPackage.UI_MODEL__ALIAS:
        return getAlias();
      case QuickUIPackage.UI_MODEL__WINDOW:
        return getWindow();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case QuickUIPackage.UI_MODEL__ALIAS:
        getAlias().clear();
        getAlias().addAll((Collection<? extends Alias>)newValue);
        return;
      case QuickUIPackage.UI_MODEL__WINDOW:
        getWindow().clear();
        getWindow().addAll((Collection<? extends Window>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case QuickUIPackage.UI_MODEL__ALIAS:
        getAlias().clear();
        return;
      case QuickUIPackage.UI_MODEL__WINDOW:
        getWindow().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case QuickUIPackage.UI_MODEL__ALIAS:
        return alias != null && !alias.isEmpty();
      case QuickUIPackage.UI_MODEL__WINDOW:
        return window != null && !window.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //UIModelImpl
