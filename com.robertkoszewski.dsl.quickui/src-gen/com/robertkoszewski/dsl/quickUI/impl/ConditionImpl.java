/**
 * generated by Xtext 2.11.0
 */
package com.robertkoszewski.dsl.quickUI.impl;

import com.robertkoszewski.dsl.quickUI.Condition;
import com.robertkoszewski.dsl.quickUI.ConditionType;
import com.robertkoszewski.dsl.quickUI.Element;
import com.robertkoszewski.dsl.quickUI.QuickUIPackage;

import java.lang.Boolean;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Condition</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.robertkoszewski.dsl.quickUI.impl.ConditionImpl#getElement <em>Element</em>}</li>
 *   <li>{@link com.robertkoszewski.dsl.quickUI.impl.ConditionImpl#isNegation <em>Negation</em>}</li>
 *   <li>{@link com.robertkoszewski.dsl.quickUI.impl.ConditionImpl#getCondition <em>Condition</em>}</li>
 *   <li>{@link com.robertkoszewski.dsl.quickUI.impl.ConditionImpl#getSubcondition <em>Subcondition</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ConditionImpl extends MinimalEObjectImpl.Container implements Condition
{
  /**
   * The cached value of the '{@link #getElement() <em>Element</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getElement()
   * @generated
   * @ordered
   */
  protected Element element;

  /**
   * The default value of the '{@link #isNegation() <em>Negation</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isNegation()
   * @generated
   * @ordered
   */
  protected static final boolean NEGATION_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isNegation() <em>Negation</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isNegation()
   * @generated
   * @ordered
   */
  protected boolean negation = NEGATION_EDEFAULT;

  /**
   * The cached value of the '{@link #getCondition() <em>Condition</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCondition()
   * @generated
   * @ordered
   */
  protected ConditionType condition;

  /**
   * The cached value of the '{@link #getSubcondition() <em>Subcondition</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSubcondition()
   * @generated
   * @ordered
   */
  protected Condition subcondition;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ConditionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return QuickUIPackage.Literals.CONDITION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Element getElement()
  {
    if (element != null && element.eIsProxy())
    {
      InternalEObject oldElement = (InternalEObject)element;
      element = (Element)eResolveProxy(oldElement);
      if (element != oldElement)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, QuickUIPackage.CONDITION__ELEMENT, oldElement, element));
      }
    }
    return element;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Element basicGetElement()
  {
    return element;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setElement(Element newElement)
  {
    Element oldElement = element;
    element = newElement;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, QuickUIPackage.CONDITION__ELEMENT, oldElement, element));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public boolean isNegation()
  {
    return negation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setNegation(boolean newNegation)
  {
    boolean oldNegation = negation;
    negation = newNegation;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, QuickUIPackage.CONDITION__NEGATION, oldNegation, negation));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ConditionType getCondition()
  {
    return condition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetCondition(ConditionType newCondition, NotificationChain msgs)
  {
    ConditionType oldCondition = condition;
    condition = newCondition;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, QuickUIPackage.CONDITION__CONDITION, oldCondition, newCondition);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setCondition(ConditionType newCondition)
  {
    if (newCondition != condition)
    {
      NotificationChain msgs = null;
      if (condition != null)
        msgs = ((InternalEObject)condition).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - QuickUIPackage.CONDITION__CONDITION, null, msgs);
      if (newCondition != null)
        msgs = ((InternalEObject)newCondition).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - QuickUIPackage.CONDITION__CONDITION, null, msgs);
      msgs = basicSetCondition(newCondition, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, QuickUIPackage.CONDITION__CONDITION, newCondition, newCondition));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Condition getSubcondition()
  {
    return subcondition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetSubcondition(Condition newSubcondition, NotificationChain msgs)
  {
    Condition oldSubcondition = subcondition;
    subcondition = newSubcondition;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, QuickUIPackage.CONDITION__SUBCONDITION, oldSubcondition, newSubcondition);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setSubcondition(Condition newSubcondition)
  {
    if (newSubcondition != subcondition)
    {
      NotificationChain msgs = null;
      if (subcondition != null)
        msgs = ((InternalEObject)subcondition).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - QuickUIPackage.CONDITION__SUBCONDITION, null, msgs);
      if (newSubcondition != null)
        msgs = ((InternalEObject)newSubcondition).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - QuickUIPackage.CONDITION__SUBCONDITION, null, msgs);
      msgs = basicSetSubcondition(newSubcondition, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, QuickUIPackage.CONDITION__SUBCONDITION, newSubcondition, newSubcondition));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case QuickUIPackage.CONDITION__CONDITION:
        return basicSetCondition(null, msgs);
      case QuickUIPackage.CONDITION__SUBCONDITION:
        return basicSetSubcondition(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case QuickUIPackage.CONDITION__ELEMENT:
        if (resolve) return getElement();
        return basicGetElement();
      case QuickUIPackage.CONDITION__NEGATION:
        return isNegation();
      case QuickUIPackage.CONDITION__CONDITION:
        return getCondition();
      case QuickUIPackage.CONDITION__SUBCONDITION:
        return getSubcondition();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case QuickUIPackage.CONDITION__ELEMENT:
        setElement((Element)newValue);
        return;
      case QuickUIPackage.CONDITION__NEGATION:
        setNegation((Boolean)newValue);
        return;
      case QuickUIPackage.CONDITION__CONDITION:
        setCondition((ConditionType)newValue);
        return;
      case QuickUIPackage.CONDITION__SUBCONDITION:
        setSubcondition((Condition)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case QuickUIPackage.CONDITION__ELEMENT:
        setElement((Element)null);
        return;
      case QuickUIPackage.CONDITION__NEGATION:
        setNegation(NEGATION_EDEFAULT);
        return;
      case QuickUIPackage.CONDITION__CONDITION:
        setCondition((ConditionType)null);
        return;
      case QuickUIPackage.CONDITION__SUBCONDITION:
        setSubcondition((Condition)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case QuickUIPackage.CONDITION__ELEMENT:
        return element != null;
      case QuickUIPackage.CONDITION__NEGATION:
        return negation != NEGATION_EDEFAULT;
      case QuickUIPackage.CONDITION__CONDITION:
        return condition != null;
      case QuickUIPackage.CONDITION__SUBCONDITION:
        return subcondition != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (negation: ");
    result.append(negation);
    result.append(')');
    return result.toString();
  }

} //ConditionImpl
