/*
 * generated by Xtext 2.11.0
 */
package com.robertkoszewski.dsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class QuickUIGrammarAccess extends AbstractGrammarElementFinder {
	
	public class UIModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.robertkoszewski.dsl.QuickUI.UIModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAliasAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAliasAliasParserRuleCall_0_0 = (RuleCall)cAliasAssignment_0.eContents().get(0);
		private final Assignment cWindowAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cWindowWindowParserRuleCall_1_0 = (RuleCall)cWindowAssignment_1.eContents().get(0);
		
		//UIModel:
		//	alias+=Alias* window+=Window+;
		@Override public ParserRule getRule() { return rule; }
		
		//alias+=Alias* window+=Window+
		public Group getGroup() { return cGroup; }
		
		//alias+=Alias*
		public Assignment getAliasAssignment_0() { return cAliasAssignment_0; }
		
		//Alias
		public RuleCall getAliasAliasParserRuleCall_0_0() { return cAliasAliasParserRuleCall_0_0; }
		
		//window+=Window+
		public Assignment getWindowAssignment_1() { return cWindowAssignment_1; }
		
		//Window
		public RuleCall getWindowWindowParserRuleCall_1_0() { return cWindowWindowParserRuleCall_1_0; }
	}
	public class AliasElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.robertkoszewski.dsl.QuickUI.Alias");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPackageAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPackagePackageParserRuleCall_3_0 = (RuleCall)cPackageAssignment_3.eContents().get(0);
		
		//Alias:
		//	'use' name=ID ':' package=Package;
		@Override public ParserRule getRule() { return rule; }
		
		//'use' name=ID ':' package=Package
		public Group getGroup() { return cGroup; }
		
		//'use'
		public Keyword getUseKeyword_0() { return cUseKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//package=Package
		public Assignment getPackageAssignment_3() { return cPackageAssignment_3; }
		
		//Package
		public RuleCall getPackagePackageParserRuleCall_3_0() { return cPackagePackageParserRuleCall_3_0; }
	}
	public class PackageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.robertkoszewski.dsl.QuickUI.Package");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPnameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPnameIDTerminalRuleCall_0_0 = (RuleCall)cPnameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cSubpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cSubpPackageParserRuleCall_1_1_0 = (RuleCall)cSubpAssignment_1_1.eContents().get(0);
		
		//Package:
		//	pname=ID ('.' subp=Package)?;
		@Override public ParserRule getRule() { return rule; }
		
		//pname=ID ('.' subp=Package)?
		public Group getGroup() { return cGroup; }
		
		//pname=ID
		public Assignment getPnameAssignment_0() { return cPnameAssignment_0; }
		
		//ID
		public RuleCall getPnameIDTerminalRuleCall_0_0() { return cPnameIDTerminalRuleCall_0_0; }
		
		//('.' subp=Package)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//subp=Package
		public Assignment getSubpAssignment_1_1() { return cSubpAssignment_1_1; }
		
		//Package
		public RuleCall getSubpPackageParserRuleCall_1_1_0() { return cSubpPackageParserRuleCall_1_1_0; }
	}
	public class WindowElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.robertkoszewski.dsl.QuickUI.Window");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cWindowAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cMainAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cMainMainKeyword_1_0_0 = (Keyword)cMainAssignment_1_0.eContents().get(0);
		private final Keyword cColonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cColonKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cTitleAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cTitleSTRINGTerminalRuleCall_3_1_0 = (RuleCall)cTitleAssignment_3_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cMenuKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cMenu_elementsAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cMenu_elementsElementParserRuleCall_5_2_0 = (RuleCall)cMenu_elementsAssignment_5_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5_3 = (Keyword)cGroup_5.eContents().get(3);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cContentKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Assignment cContent_elementsAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cContent_elementsElementParserRuleCall_6_2_0 = (RuleCall)cContent_elementsAssignment_6_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6_3 = (Keyword)cGroup_6.eContents().get(3);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Window:
		//	{Window} (main?='Main' ':')? name=ID (':' title=STRING)? '{' ('Menu' '{' menu_elements+=Element* '}')? ('Content' '{'
		//	content_elements+=Element* '}')
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Window} (main?='Main' ':')? name=ID (':' title=STRING)? '{' ('Menu' '{' menu_elements+=Element* '}')? ('Content' '{'
		//content_elements+=Element* '}') '}'
		public Group getGroup() { return cGroup; }
		
		//{Window}
		public Action getWindowAction_0() { return cWindowAction_0; }
		
		//(main?='Main' ':')?
		public Group getGroup_1() { return cGroup_1; }
		
		//main?='Main'
		public Assignment getMainAssignment_1_0() { return cMainAssignment_1_0; }
		
		//'Main'
		public Keyword getMainMainKeyword_1_0_0() { return cMainMainKeyword_1_0_0; }
		
		//':'
		public Keyword getColonKeyword_1_1() { return cColonKeyword_1_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//(':' title=STRING)?
		public Group getGroup_3() { return cGroup_3; }
		
		//':'
		public Keyword getColonKeyword_3_0() { return cColonKeyword_3_0; }
		
		//title=STRING
		public Assignment getTitleAssignment_3_1() { return cTitleAssignment_3_1; }
		
		//STRING
		public RuleCall getTitleSTRINGTerminalRuleCall_3_1_0() { return cTitleSTRINGTerminalRuleCall_3_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//('Menu' '{' menu_elements+=Element* '}')?
		public Group getGroup_5() { return cGroup_5; }
		
		//'Menu'
		public Keyword getMenuKeyword_5_0() { return cMenuKeyword_5_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5_1() { return cLeftCurlyBracketKeyword_5_1; }
		
		//menu_elements+=Element*
		public Assignment getMenu_elementsAssignment_5_2() { return cMenu_elementsAssignment_5_2; }
		
		//Element
		public RuleCall getMenu_elementsElementParserRuleCall_5_2_0() { return cMenu_elementsElementParserRuleCall_5_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5_3() { return cRightCurlyBracketKeyword_5_3; }
		
		//'Content' '{' content_elements+=Element* '}'
		public Group getGroup_6() { return cGroup_6; }
		
		//'Content'
		public Keyword getContentKeyword_6_0() { return cContentKeyword_6_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_6_1() { return cLeftCurlyBracketKeyword_6_1; }
		
		//content_elements+=Element*
		public Assignment getContent_elementsAssignment_6_2() { return cContent_elementsAssignment_6_2; }
		
		//Element
		public RuleCall getContent_elementsElementParserRuleCall_6_2_0() { return cContent_elementsElementParserRuleCall_6_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6_3() { return cRightCurlyBracketKeyword_6_3; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class ElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.robertkoszewski.dsl.QuickUI.Element");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRowParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cJavaElementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Element:
		//	Row | JavaElement;
		@Override public ParserRule getRule() { return rule; }
		
		//Row | JavaElement
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Row
		public RuleCall getRowParserRuleCall_0() { return cRowParserRuleCall_0; }
		
		//JavaElement
		public RuleCall getJavaElementParserRuleCall_1() { return cJavaElementParserRuleCall_1; }
	}
	public class JavaElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.robertkoszewski.dsl.QuickUI.JavaElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAliasAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cAliasAliasCrossReference_0_0 = (CrossReference)cAliasAssignment_0.eContents().get(0);
		private final RuleCall cAliasAliasIDTerminalRuleCall_0_0_1 = (RuleCall)cAliasAliasCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cColonKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSubelementAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Alternatives cSubelementAlternatives_3_0 = (Alternatives)cSubelementAssignment_3.eContents().get(0);
		private final RuleCall cSubelementElementParserRuleCall_3_0_0 = (RuleCall)cSubelementAlternatives_3_0.eContents().get(0);
		private final RuleCall cSubelementOptionParserRuleCall_3_0_1 = (RuleCall)cSubelementAlternatives_3_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//JavaElement:
		//	alias=[Alias] (':' name=ID)? '{' subelement+=(Element | Option)* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//alias=[Alias] (':' name=ID)? '{' subelement+=(Element | Option)* '}'
		public Group getGroup() { return cGroup; }
		
		//alias=[Alias]
		public Assignment getAliasAssignment_0() { return cAliasAssignment_0; }
		
		//[Alias]
		public CrossReference getAliasAliasCrossReference_0_0() { return cAliasAliasCrossReference_0_0; }
		
		//ID
		public RuleCall getAliasAliasIDTerminalRuleCall_0_0_1() { return cAliasAliasIDTerminalRuleCall_0_0_1; }
		
		//(':' name=ID)?
		public Group getGroup_1() { return cGroup_1; }
		
		//':'
		public Keyword getColonKeyword_1_0() { return cColonKeyword_1_0; }
		
		//name=ID
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_1_0() { return cNameIDTerminalRuleCall_1_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//subelement+=(Element | Option)*
		public Assignment getSubelementAssignment_3() { return cSubelementAssignment_3; }
		
		//(Element | Option)
		public Alternatives getSubelementAlternatives_3_0() { return cSubelementAlternatives_3_0; }
		
		//Element
		public RuleCall getSubelementElementParserRuleCall_3_0_0() { return cSubelementElementParserRuleCall_3_0_0; }
		
		//Option
		public RuleCall getSubelementOptionParserRuleCall_3_0_1() { return cSubelementOptionParserRuleCall_3_0_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class RowElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.robertkoszewski.dsl.QuickUI.Row");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRowKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cColonKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSubelementAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Alternatives cSubelementAlternatives_3_0 = (Alternatives)cSubelementAssignment_3.eContents().get(0);
		private final RuleCall cSubelementElementParserRuleCall_3_0_0 = (RuleCall)cSubelementAlternatives_3_0.eContents().get(0);
		private final RuleCall cSubelementOptionParserRuleCall_3_0_1 = (RuleCall)cSubelementAlternatives_3_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Row:
		//	'Row' (':' name=ID)? '{' subelement+=(Element | Option)+ '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Row' (':' name=ID)? '{' subelement+=(Element | Option)+ '}'
		public Group getGroup() { return cGroup; }
		
		//'Row'
		public Keyword getRowKeyword_0() { return cRowKeyword_0; }
		
		//(':' name=ID)?
		public Group getGroup_1() { return cGroup_1; }
		
		//':'
		public Keyword getColonKeyword_1_0() { return cColonKeyword_1_0; }
		
		//name=ID
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_1_0() { return cNameIDTerminalRuleCall_1_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//subelement+=(Element | Option)+
		public Assignment getSubelementAssignment_3() { return cSubelementAssignment_3; }
		
		//(Element | Option)
		public Alternatives getSubelementAlternatives_3_0() { return cSubelementAlternatives_3_0; }
		
		//Element
		public RuleCall getSubelementElementParserRuleCall_3_0_0() { return cSubelementElementParserRuleCall_3_0_0; }
		
		//Option
		public RuleCall getSubelementOptionParserRuleCall_3_0_1() { return cSubelementOptionParserRuleCall_3_0_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class OptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.robertkoszewski.dsl.QuickUI.Option");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLabelParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEnabledParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cCheckedParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cOnClickParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//// Static Options
		//// - Filter
		//// - Disabled
		//// - Checked
		//// - OnClick
		//Option:
		//	Label | Enabled | Checked | OnClick /*|{Filter}Filter*/;
		@Override public ParserRule getRule() { return rule; }
		
		//Label | Enabled | Checked | OnClick
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Label
		public RuleCall getLabelParserRuleCall_0() { return cLabelParserRuleCall_0; }
		
		//Enabled
		public RuleCall getEnabledParserRuleCall_1() { return cEnabledParserRuleCall_1; }
		
		//Checked
		public RuleCall getCheckedParserRuleCall_2() { return cCheckedParserRuleCall_2; }
		
		//OnClick
		public RuleCall getOnClickParserRuleCall_3() { return cOnClickParserRuleCall_3; }
	}
	public class LabelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.robertkoszewski.dsl.QuickUI.Label");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLabelKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueSTRINGTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		///* 
		//Value:
		//	{OptionValue} optname=ID ':' value=STRING
		//;
		//*/ Label:
		//	'Label' ':' value=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'Label' ':' value=STRING
		public Group getGroup() { return cGroup; }
		
		//'Label'
		public Keyword getLabelKeyword_0() { return cLabelKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//value=STRING
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_2_0() { return cValueSTRINGTerminalRuleCall_2_0; }
	}
	public class EnabledElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.robertkoszewski.dsl.QuickUI.Enabled");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEnabledKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cConditionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConditionConditionBranchParserRuleCall_2_0 = (RuleCall)cConditionAssignment_2.eContents().get(0);
		
		//Enabled:
		//	'Enabled' ':' condition=ConditionBranch;
		@Override public ParserRule getRule() { return rule; }
		
		//'Enabled' ':' condition=ConditionBranch
		public Group getGroup() { return cGroup; }
		
		//'Enabled'
		public Keyword getEnabledKeyword_0() { return cEnabledKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//condition=ConditionBranch
		public Assignment getConditionAssignment_2() { return cConditionAssignment_2; }
		
		//ConditionBranch
		public RuleCall getConditionConditionBranchParserRuleCall_2_0() { return cConditionConditionBranchParserRuleCall_2_0; }
	}
	public class ConditionBranchElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.robertkoszewski.dsl.QuickUI.ConditionBranch");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cConditionConcatenationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cConditionBranchLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cOrKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightConditionConcatenationParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//ConditionBranch ConditionDefinition:
		//	ConditionConcatenation ({ConditionBranch.left=current} 'or' right=ConditionConcatenation)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ConditionConcatenation ({ConditionBranch.left=current} 'or' right=ConditionConcatenation)*
		public Group getGroup() { return cGroup; }
		
		//ConditionConcatenation
		public RuleCall getConditionConcatenationParserRuleCall_0() { return cConditionConcatenationParserRuleCall_0; }
		
		//({ConditionBranch.left=current} 'or' right=ConditionConcatenation)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{ConditionBranch.left=current}
		public Action getConditionBranchLeftAction_1_0() { return cConditionBranchLeftAction_1_0; }
		
		//'or'
		public Keyword getOrKeyword_1_1() { return cOrKeyword_1_1; }
		
		//right=ConditionConcatenation
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//ConditionConcatenation
		public RuleCall getRightConditionConcatenationParserRuleCall_1_2_0() { return cRightConditionConcatenationParserRuleCall_1_2_0; }
	}
	public class ConditionConcatenationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.robertkoszewski.dsl.QuickUI.ConditionConcatenation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cConditionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cConditionConcatenationLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cAndKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightConditionValueParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//ConditionConcatenation ConditionDefinition:
		//	Condition ({ConditionConcatenation.left=current} 'and' right=ConditionValue)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Condition ({ConditionConcatenation.left=current} 'and' right=ConditionValue)*
		public Group getGroup() { return cGroup; }
		
		//Condition
		public RuleCall getConditionParserRuleCall_0() { return cConditionParserRuleCall_0; }
		
		//({ConditionConcatenation.left=current} 'and' right=ConditionValue)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{ConditionConcatenation.left=current}
		public Action getConditionConcatenationLeftAction_1_0() { return cConditionConcatenationLeftAction_1_0; }
		
		//'and'
		public Keyword getAndKeyword_1_1() { return cAndKeyword_1_1; }
		
		//right=ConditionValue
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//ConditionValue
		public RuleCall getRightConditionValueParserRuleCall_1_2_0() { return cRightConditionValueParserRuleCall_1_2_0; }
	}
	public class ConditionValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.robertkoszewski.dsl.QuickUI.ConditionValue");
		private final RuleCall cConditionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//ConditionValue ConditionDefinition:
		//	Condition;
		@Override public ParserRule getRule() { return rule; }
		
		//Condition
		public RuleCall getConditionParserRuleCall() { return cConditionParserRuleCall; }
	}
	public class ConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.robertkoszewski.dsl.QuickUI.Condition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cElementAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cElementElementCrossReference_1_0 = (CrossReference)cElementAssignment_1.eContents().get(0);
		private final RuleCall cElementElementIDTerminalRuleCall_1_0_1 = (RuleCall)cElementElementCrossReference_1_0.eContents().get(1);
		private final Keyword cIsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNegationAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cNegationNotKeyword_3_0 = (Keyword)cNegationAssignment_3.eContents().get(0);
		private final Assignment cConditionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cConditionConditionTypeParserRuleCall_4_0 = (RuleCall)cConditionAssignment_4.eContents().get(0);
		
		//Condition:
		//	'if'? element=[Element] 'is'? negation?='not'? condition=ConditionType;
		@Override public ParserRule getRule() { return rule; }
		
		//'if'? element=[Element] 'is'? negation?='not'? condition=ConditionType
		public Group getGroup() { return cGroup; }
		
		//'if'?
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }
		
		//element=[Element]
		public Assignment getElementAssignment_1() { return cElementAssignment_1; }
		
		//[Element]
		public CrossReference getElementElementCrossReference_1_0() { return cElementElementCrossReference_1_0; }
		
		//ID
		public RuleCall getElementElementIDTerminalRuleCall_1_0_1() { return cElementElementIDTerminalRuleCall_1_0_1; }
		
		//'is'?
		public Keyword getIsKeyword_2() { return cIsKeyword_2; }
		
		//negation?='not'?
		public Assignment getNegationAssignment_3() { return cNegationAssignment_3; }
		
		//'not'
		public Keyword getNegationNotKeyword_3_0() { return cNegationNotKeyword_3_0; }
		
		//condition=ConditionType
		public Assignment getConditionAssignment_4() { return cConditionAssignment_4; }
		
		//ConditionType
		public RuleCall getConditionConditionTypeParserRuleCall_4_0() { return cConditionConditionTypeParserRuleCall_4_0; }
	}
	public class ConditionTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.robertkoszewski.dsl.QuickUI.ConditionType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cEmptyAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cEmptyKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cCheckedAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cCheckedKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//ConditionType:
		//	{Empty} 'empty' | {Checked} 'checked';
		@Override public ParserRule getRule() { return rule; }
		
		//{Empty} 'empty' | {Checked} 'checked'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{Empty} 'empty'
		public Group getGroup_0() { return cGroup_0; }
		
		//{Empty}
		public Action getEmptyAction_0_0() { return cEmptyAction_0_0; }
		
		//'empty'
		public Keyword getEmptyKeyword_0_1() { return cEmptyKeyword_0_1; }
		
		//{Checked} 'checked'
		public Group getGroup_1() { return cGroup_1; }
		
		//{Checked}
		public Action getCheckedAction_1_0() { return cCheckedAction_1_0; }
		
		//'checked'
		public Keyword getCheckedKeyword_1_1() { return cCheckedKeyword_1_1; }
	}
	public class CheckedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.robertkoszewski.dsl.QuickUI.Checked");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCheckedKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cCheckedAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCheckedBooleanParserRuleCall_2_0 = (RuleCall)cCheckedAssignment_2.eContents().get(0);
		
		//Checked:
		//	'Checked' ':' checked=Boolean;
		@Override public ParserRule getRule() { return rule; }
		
		//'Checked' ':' checked=Boolean
		public Group getGroup() { return cGroup; }
		
		//'Checked'
		public Keyword getCheckedKeyword_0() { return cCheckedKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//checked=Boolean
		public Assignment getCheckedAssignment_2() { return cCheckedAssignment_2; }
		
		//Boolean
		public RuleCall getCheckedBooleanParserRuleCall_2_0() { return cCheckedBooleanParserRuleCall_2_0; }
	}
	public class OnClickElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.robertkoszewski.dsl.QuickUI.OnClick");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOnClickKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cCallbackAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCallbackIDTerminalRuleCall_2_0 = (RuleCall)cCallbackAssignment_2.eContents().get(0);
		
		//OnClick:
		//	'OnClick' ':' callback=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'OnClick' ':' callback=ID
		public Group getGroup() { return cGroup; }
		
		//'OnClick'
		public Keyword getOnClickKeyword_0() { return cOnClickKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//callback=ID
		public Assignment getCallbackAssignment_2() { return cCallbackAssignment_2; }
		
		//ID
		public RuleCall getCallbackIDTerminalRuleCall_2_0() { return cCallbackIDTerminalRuleCall_2_0; }
	}
	public class BooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.robertkoszewski.dsl.QuickUI.Boolean");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBooleanAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cIsTrueAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final Keyword cIsTrueTrueKeyword_1_0_0 = (Keyword)cIsTrueAssignment_1_0.eContents().get(0);
		private final Keyword cFalseKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		
		///*
		//Filter:
		//	'Filter' ':' FilterExpression
		//;
		//
		//FilterExpression:
		//	'TODO'
		//;
		//*/ Boolean:
		//	{Boolean} (isTrue?='true' | 'false');
		@Override public ParserRule getRule() { return rule; }
		
		//{Boolean} (isTrue?='true' | 'false')
		public Group getGroup() { return cGroup; }
		
		//{Boolean}
		public Action getBooleanAction_0() { return cBooleanAction_0; }
		
		//isTrue?='true' | 'false'
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//isTrue?='true'
		public Assignment getIsTrueAssignment_1_0() { return cIsTrueAssignment_1_0; }
		
		//'true'
		public Keyword getIsTrueTrueKeyword_1_0_0() { return cIsTrueTrueKeyword_1_0_0; }
		
		//'false'
		public Keyword getFalseKeyword_1_1() { return cFalseKeyword_1_1; }
	}
	
	
	private final UIModelElements pUIModel;
	private final AliasElements pAlias;
	private final PackageElements pPackage;
	private final WindowElements pWindow;
	private final ElementElements pElement;
	private final JavaElementElements pJavaElement;
	private final RowElements pRow;
	private final OptionElements pOption;
	private final LabelElements pLabel;
	private final EnabledElements pEnabled;
	private final ConditionBranchElements pConditionBranch;
	private final ConditionConcatenationElements pConditionConcatenation;
	private final ConditionValueElements pConditionValue;
	private final ConditionElements pCondition;
	private final ConditionTypeElements pConditionType;
	private final CheckedElements pChecked;
	private final OnClickElements pOnClick;
	private final BooleanElements pBoolean;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public QuickUIGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pUIModel = new UIModelElements();
		this.pAlias = new AliasElements();
		this.pPackage = new PackageElements();
		this.pWindow = new WindowElements();
		this.pElement = new ElementElements();
		this.pJavaElement = new JavaElementElements();
		this.pRow = new RowElements();
		this.pOption = new OptionElements();
		this.pLabel = new LabelElements();
		this.pEnabled = new EnabledElements();
		this.pConditionBranch = new ConditionBranchElements();
		this.pConditionConcatenation = new ConditionConcatenationElements();
		this.pConditionValue = new ConditionValueElements();
		this.pCondition = new ConditionElements();
		this.pConditionType = new ConditionTypeElements();
		this.pChecked = new CheckedElements();
		this.pOnClick = new OnClickElements();
		this.pBoolean = new BooleanElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.robertkoszewski.dsl.QuickUI".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//UIModel:
	//	alias+=Alias* window+=Window+;
	public UIModelElements getUIModelAccess() {
		return pUIModel;
	}
	
	public ParserRule getUIModelRule() {
		return getUIModelAccess().getRule();
	}
	
	//Alias:
	//	'use' name=ID ':' package=Package;
	public AliasElements getAliasAccess() {
		return pAlias;
	}
	
	public ParserRule getAliasRule() {
		return getAliasAccess().getRule();
	}
	
	//Package:
	//	pname=ID ('.' subp=Package)?;
	public PackageElements getPackageAccess() {
		return pPackage;
	}
	
	public ParserRule getPackageRule() {
		return getPackageAccess().getRule();
	}
	
	//Window:
	//	{Window} (main?='Main' ':')? name=ID (':' title=STRING)? '{' ('Menu' '{' menu_elements+=Element* '}')? ('Content' '{'
	//	content_elements+=Element* '}')
	//	'}';
	public WindowElements getWindowAccess() {
		return pWindow;
	}
	
	public ParserRule getWindowRule() {
		return getWindowAccess().getRule();
	}
	
	//Element:
	//	Row | JavaElement;
	public ElementElements getElementAccess() {
		return pElement;
	}
	
	public ParserRule getElementRule() {
		return getElementAccess().getRule();
	}
	
	//JavaElement:
	//	alias=[Alias] (':' name=ID)? '{' subelement+=(Element | Option)* '}';
	public JavaElementElements getJavaElementAccess() {
		return pJavaElement;
	}
	
	public ParserRule getJavaElementRule() {
		return getJavaElementAccess().getRule();
	}
	
	//Row:
	//	'Row' (':' name=ID)? '{' subelement+=(Element | Option)+ '}';
	public RowElements getRowAccess() {
		return pRow;
	}
	
	public ParserRule getRowRule() {
		return getRowAccess().getRule();
	}
	
	//// Static Options
	//// - Filter
	//// - Disabled
	//// - Checked
	//// - OnClick
	//Option:
	//	Label | Enabled | Checked | OnClick /*|{Filter}Filter*/;
	public OptionElements getOptionAccess() {
		return pOption;
	}
	
	public ParserRule getOptionRule() {
		return getOptionAccess().getRule();
	}
	
	///* 
	//Value:
	//	{OptionValue} optname=ID ':' value=STRING
	//;
	//*/ Label:
	//	'Label' ':' value=STRING;
	public LabelElements getLabelAccess() {
		return pLabel;
	}
	
	public ParserRule getLabelRule() {
		return getLabelAccess().getRule();
	}
	
	//Enabled:
	//	'Enabled' ':' condition=ConditionBranch;
	public EnabledElements getEnabledAccess() {
		return pEnabled;
	}
	
	public ParserRule getEnabledRule() {
		return getEnabledAccess().getRule();
	}
	
	//ConditionBranch ConditionDefinition:
	//	ConditionConcatenation ({ConditionBranch.left=current} 'or' right=ConditionConcatenation)*;
	public ConditionBranchElements getConditionBranchAccess() {
		return pConditionBranch;
	}
	
	public ParserRule getConditionBranchRule() {
		return getConditionBranchAccess().getRule();
	}
	
	//ConditionConcatenation ConditionDefinition:
	//	Condition ({ConditionConcatenation.left=current} 'and' right=ConditionValue)*;
	public ConditionConcatenationElements getConditionConcatenationAccess() {
		return pConditionConcatenation;
	}
	
	public ParserRule getConditionConcatenationRule() {
		return getConditionConcatenationAccess().getRule();
	}
	
	//ConditionValue ConditionDefinition:
	//	Condition;
	public ConditionValueElements getConditionValueAccess() {
		return pConditionValue;
	}
	
	public ParserRule getConditionValueRule() {
		return getConditionValueAccess().getRule();
	}
	
	//Condition:
	//	'if'? element=[Element] 'is'? negation?='not'? condition=ConditionType;
	public ConditionElements getConditionAccess() {
		return pCondition;
	}
	
	public ParserRule getConditionRule() {
		return getConditionAccess().getRule();
	}
	
	//ConditionType:
	//	{Empty} 'empty' | {Checked} 'checked';
	public ConditionTypeElements getConditionTypeAccess() {
		return pConditionType;
	}
	
	public ParserRule getConditionTypeRule() {
		return getConditionTypeAccess().getRule();
	}
	
	//Checked:
	//	'Checked' ':' checked=Boolean;
	public CheckedElements getCheckedAccess() {
		return pChecked;
	}
	
	public ParserRule getCheckedRule() {
		return getCheckedAccess().getRule();
	}
	
	//OnClick:
	//	'OnClick' ':' callback=ID;
	public OnClickElements getOnClickAccess() {
		return pOnClick;
	}
	
	public ParserRule getOnClickRule() {
		return getOnClickAccess().getRule();
	}
	
	///*
	//Filter:
	//	'Filter' ':' FilterExpression
	//;
	//
	//FilterExpression:
	//	'TODO'
	//;
	//*/ Boolean:
	//	{Boolean} (isTrue?='true' | 'false');
	public BooleanElements getBooleanAccess() {
		return pBoolean;
	}
	
	public ParserRule getBooleanRule() {
		return getBooleanAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
