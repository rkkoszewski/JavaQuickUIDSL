/*
 * generated by Xtext 2.11.0
 */
package com.robertkoszewski.dsl.serializer;

import com.google.inject.Inject;
import com.robertkoszewski.dsl.services.QuickUIGrammarAccess;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.GroupAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;

@SuppressWarnings("all")
public class QuickUISyntacticSequencer extends AbstractSyntacticSequencer {

	protected QuickUIGrammarAccess grammarAccess;
	protected AbstractElementAlias match_Condition_IfKeyword_0_q;
	protected AbstractElementAlias match_Condition_IsKeyword_2_q;
	protected AbstractElementAlias match_Window___MenuKeyword_5_0_LeftCurlyBracketKeyword_5_1_RightCurlyBracketKeyword_5_3__q;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (QuickUIGrammarAccess) access;
		match_Condition_IfKeyword_0_q = new TokenAlias(false, true, grammarAccess.getConditionAccess().getIfKeyword_0());
		match_Condition_IsKeyword_2_q = new TokenAlias(false, true, grammarAccess.getConditionAccess().getIsKeyword_2());
		match_Window___MenuKeyword_5_0_LeftCurlyBracketKeyword_5_1_RightCurlyBracketKeyword_5_3__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getWindowAccess().getMenuKeyword_5_0()), new TokenAlias(false, false, grammarAccess.getWindowAccess().getLeftCurlyBracketKeyword_5_1()), new TokenAlias(false, false, grammarAccess.getWindowAccess().getRightCurlyBracketKeyword_5_3()));
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (ruleCall.getRule() == grammarAccess.getFilterRule())
			return getFilterToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * Filter:
	 * 	'Filter' ':' FilterExpression
	 * ;
	 */
	protected String getFilterToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "Filter:TODO";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_Condition_IfKeyword_0_q.equals(syntax))
				emit_Condition_IfKeyword_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Condition_IsKeyword_2_q.equals(syntax))
				emit_Condition_IsKeyword_2_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Window___MenuKeyword_5_0_LeftCurlyBracketKeyword_5_1_RightCurlyBracketKeyword_5_3__q.equals(syntax))
				emit_Window___MenuKeyword_5_0_LeftCurlyBracketKeyword_5_1_RightCurlyBracketKeyword_5_3__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     'if'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) element=[Element|ID]
	 */
	protected void emit_Condition_IfKeyword_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'is'?
	 *
	 * This ambiguous syntax occurs at:
	 *     element=[Element|ID] (ambiguity) condition=ConditionType
	 *     element=[Element|ID] (ambiguity) negation?='not'
	 */
	protected void emit_Condition_IsKeyword_2_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('Menu' '{' '}')?
	 *
	 * This ambiguous syntax occurs at:
	 *     name=ID '{' (ambiguity) 'Content' '{' '}' '}' (rule end)
	 *     name=ID '{' (ambiguity) 'Content' '{' content_elements+=Element
	 *     title=STRING '{' (ambiguity) 'Content' '{' '}' '}' (rule end)
	 *     title=STRING '{' (ambiguity) 'Content' '{' content_elements+=Element
	 */
	protected void emit_Window___MenuKeyword_5_0_LeftCurlyBracketKeyword_5_1_RightCurlyBracketKeyword_5_3__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
