/*
 * generated by Xtext 2.11.0
 */
package com.robertkoszewski.dsl.serializer;

import com.google.inject.Inject;
import com.robertkoszewski.dsl.quickUI.Alias;
import com.robertkoszewski.dsl.quickUI.Checked;
import com.robertkoszewski.dsl.quickUI.Condition;
import com.robertkoszewski.dsl.quickUI.Disabled;
import com.robertkoszewski.dsl.quickUI.Empty;
import com.robertkoszewski.dsl.quickUI.Filter;
import com.robertkoszewski.dsl.quickUI.JavaElement;
import com.robertkoszewski.dsl.quickUI.Label;
import com.robertkoszewski.dsl.quickUI.OnClick;
import com.robertkoszewski.dsl.quickUI.QuickUIPackage;
import com.robertkoszewski.dsl.quickUI.Row;
import com.robertkoszewski.dsl.quickUI.UIModel;
import com.robertkoszewski.dsl.quickUI.Window;
import com.robertkoszewski.dsl.services.QuickUIGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class QuickUISemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private QuickUIGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == QuickUIPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case QuickUIPackage.ALIAS:
				sequence_Alias(context, (Alias) semanticObject); 
				return; 
			case QuickUIPackage.BOOLEAN:
				sequence_Boolean(context, (com.robertkoszewski.dsl.quickUI.Boolean) semanticObject); 
				return; 
			case QuickUIPackage.CHECKED:
				if (rule == grammarAccess.getOptionRule()
						|| rule == grammarAccess.getCheckedRule()) {
					sequence_Checked(context, (Checked) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getConditionTypeRule()) {
					sequence_ConditionType(context, (Checked) semanticObject); 
					return; 
				}
				else break;
			case QuickUIPackage.CONDITION:
				sequence_Condition(context, (Condition) semanticObject); 
				return; 
			case QuickUIPackage.DISABLED:
				sequence_Disabled(context, (Disabled) semanticObject); 
				return; 
			case QuickUIPackage.EMPTY:
				sequence_ConditionType(context, (Empty) semanticObject); 
				return; 
			case QuickUIPackage.FILTER:
				sequence_Option(context, (Filter) semanticObject); 
				return; 
			case QuickUIPackage.JAVA_ELEMENT:
				sequence_JavaElement(context, (JavaElement) semanticObject); 
				return; 
			case QuickUIPackage.LABEL:
				sequence_Label(context, (Label) semanticObject); 
				return; 
			case QuickUIPackage.ON_CLICK:
				sequence_OnClick(context, (OnClick) semanticObject); 
				return; 
			case QuickUIPackage.PACKAGE:
				sequence_Package(context, (com.robertkoszewski.dsl.quickUI.Package) semanticObject); 
				return; 
			case QuickUIPackage.ROW:
				sequence_Row(context, (Row) semanticObject); 
				return; 
			case QuickUIPackage.UI_MODEL:
				sequence_UIModel(context, (UIModel) semanticObject); 
				return; 
			case QuickUIPackage.WINDOW:
				sequence_Window(context, (Window) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Alias returns Alias
	 *
	 * Constraint:
	 *     (name=ID package=Package)
	 */
	protected void sequence_Alias(ISerializationContext context, Alias semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, QuickUIPackage.Literals.ALIAS__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QuickUIPackage.Literals.ALIAS__NAME));
			if (transientValues.isValueTransient(semanticObject, QuickUIPackage.Literals.ALIAS__PACKAGE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QuickUIPackage.Literals.ALIAS__PACKAGE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAliasAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getAliasAccess().getPackagePackageParserRuleCall_3_0(), semanticObject.getPackage());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Boolean returns Boolean
	 *
	 * Constraint:
	 *     isTrue?='true'?
	 */
	protected void sequence_Boolean(ISerializationContext context, com.robertkoszewski.dsl.quickUI.Boolean semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Option returns Checked
	 *     Checked returns Checked
	 *
	 * Constraint:
	 *     checked=Boolean
	 */
	protected void sequence_Checked(ISerializationContext context, Checked semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, QuickUIPackage.Literals.CHECKED__CHECKED) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QuickUIPackage.Literals.CHECKED__CHECKED));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCheckedAccess().getCheckedBooleanParserRuleCall_2_0(), semanticObject.getChecked());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ConditionType returns Checked
	 *
	 * Constraint:
	 *     {Checked}
	 */
	protected void sequence_ConditionType(ISerializationContext context, Checked semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ConditionType returns Empty
	 *
	 * Constraint:
	 *     {Empty}
	 */
	protected void sequence_ConditionType(ISerializationContext context, Empty semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Condition returns Condition
	 *
	 * Constraint:
	 *     (element=[Element|ID] negation?='not'? condition=ConditionType subcondition=Condition?)
	 */
	protected void sequence_Condition(ISerializationContext context, Condition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Option returns Disabled
	 *     Disabled returns Disabled
	 *
	 * Constraint:
	 *     condition=Condition
	 */
	protected void sequence_Disabled(ISerializationContext context, Disabled semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, QuickUIPackage.Literals.DISABLED__CONDITION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QuickUIPackage.Literals.DISABLED__CONDITION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDisabledAccess().getConditionConditionParserRuleCall_2_0(), semanticObject.getCondition());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Element returns JavaElement
	 *     JavaElement returns JavaElement
	 *
	 * Constraint:
	 *     (alias=[Alias|ID] name=ID? (subelement+=Element | subelement+=Option)*)
	 */
	protected void sequence_JavaElement(ISerializationContext context, JavaElement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Option returns Label
	 *     Label returns Label
	 *
	 * Constraint:
	 *     value=STRING
	 */
	protected void sequence_Label(ISerializationContext context, Label semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, QuickUIPackage.Literals.LABEL__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QuickUIPackage.Literals.LABEL__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getLabelAccess().getValueSTRINGTerminalRuleCall_2_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Option returns OnClick
	 *     OnClick returns OnClick
	 *
	 * Constraint:
	 *     callback=ID
	 */
	protected void sequence_OnClick(ISerializationContext context, OnClick semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, QuickUIPackage.Literals.ON_CLICK__CALLBACK) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, QuickUIPackage.Literals.ON_CLICK__CALLBACK));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getOnClickAccess().getCallbackIDTerminalRuleCall_2_0(), semanticObject.getCallback());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Option returns Filter
	 *
	 * Constraint:
	 *     {Filter}
	 */
	protected void sequence_Option(ISerializationContext context, Filter semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Package returns Package
	 *
	 * Constraint:
	 *     (pname=ID subp=Package?)
	 */
	protected void sequence_Package(ISerializationContext context, com.robertkoszewski.dsl.quickUI.Package semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Element returns Row
	 *     Row returns Row
	 *
	 * Constraint:
	 *     (name=ID? (subelement+=Element | subelement+=Option)+)
	 */
	protected void sequence_Row(ISerializationContext context, Row semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     UIModel returns UIModel
	 *
	 * Constraint:
	 *     (alias+=Alias* window+=Window+)
	 */
	protected void sequence_UIModel(ISerializationContext context, UIModel semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Window returns Window
	 *
	 * Constraint:
	 *     (main?='Main'? name=ID title=STRING? menu_elements+=Element* content_elements+=Element*)
	 */
	protected void sequence_Window(ISerializationContext context, Window semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
